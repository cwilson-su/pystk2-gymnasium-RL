digraph "classes_pystk2_gymnasium" {
rankdir=BT
charset="utf-8"
"pystk2_gymnasium.definitions.ActionObservationWrapper" [color="black", fontcolor="black", label=<{ActionObservationWrapper|<br ALIGN="LEFT"/>|<I>action</I>(action: WrapperActType): ActType<br ALIGN="LEFT"/><I>observation</I>(observation: ObsType): WrapperObsType<br ALIGN="LEFT"/>reset(): Tuple[WrapperObsType, Dict[str, Any]]<br ALIGN="LEFT"/>step(action: ActType): Tuple[WrapperObsType, SupportsFloat, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.definitions.AgentSpec" [color="black", fontcolor="black", label=<{AgentSpec|camera_mode<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>rank_start : Optional[int]<br ALIGN="LEFT"/>use_ai : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.BaseSTKRaceEnv" [color="black", fontcolor="black", label=<{BaseSTKRaceEnv|TRACKS : ClassVar[List[str]]<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>current_track : NoneType<br ALIGN="LEFT"/>default_track : NoneType<br ALIGN="LEFT"/>difficulty : int<br ALIGN="LEFT"/>laps : int<br ALIGN="LEFT"/>last_overall_distances<br ALIGN="LEFT"/>max_paths : NoneType<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>num_kart : int<br ALIGN="LEFT"/>race : NoneType<br ALIGN="LEFT"/>render_mode : NoneType<br ALIGN="LEFT"/>track<br ALIGN="LEFT"/>world : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_observation(kart_ix, use_ai)<br ALIGN="LEFT"/>get_state(kart_ix: int, use_ai: bool)<br ALIGN="LEFT"/>initialize(with_graphics: bool)<br ALIGN="LEFT"/>race_step()<br ALIGN="LEFT"/><I>render</I>()<br ALIGN="LEFT"/>reset_race(random: np.random.RandomState): Tuple[pystk2.WorldState, Dict[str, Any]]<br ALIGN="LEFT"/>warmup_race()<br ALIGN="LEFT"/>world_update(keep)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.stk_wrappers.ConstantSizedObservations" [color="black", fontcolor="black", label=<{ConstantSizedObservations|add_mask : bool<br ALIGN="LEFT"/>state_items : int<br ALIGN="LEFT"/>state_karts : int<br ALIGN="LEFT"/>state_paths : int<br ALIGN="LEFT"/>|make_tensor(state, name: str, default_value)<br ALIGN="LEFT"/>observation(state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.stk_wrappers.DiscreteActionsWrapper" [color="black", fontcolor="black", label=<{DiscreteActionsWrapper|d_acceleration<br ALIGN="LEFT"/>d_steer<br ALIGN="LEFT"/>|action(action: STKDiscreteAction): Tuple[Any, float, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>from_discrete(action)<br ALIGN="LEFT"/>observation(obs)<br ALIGN="LEFT"/>to_discrete(action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.utils.Discretizer" [color="black", fontcolor="black", label=<{Discretizer|max_value : float<br ALIGN="LEFT"/>min_value : float<br ALIGN="LEFT"/>space : Discrete<br ALIGN="LEFT"/>values : int<br ALIGN="LEFT"/>|continuous(value: int)<br ALIGN="LEFT"/>discretize(value: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.wrappers.FlattenMultiDiscreteActions" [color="black", fontcolor="black", label=<{FlattenMultiDiscreteActions|action_space : Discrete<br ALIGN="LEFT"/>nvec<br ALIGN="LEFT"/>|action(action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.wrappers.FlattenerWrapper" [color="black", fontcolor="black", label=<{FlattenerWrapper|action_flattener<br ALIGN="LEFT"/>action_space : Box, Dict, MultiDiscrete<br ALIGN="LEFT"/>flatten_observations : bool<br ALIGN="LEFT"/>has_action<br ALIGN="LEFT"/>observation_flattener<br ALIGN="LEFT"/>observation_space : Box, Dict, MultiDiscrete<br ALIGN="LEFT"/>|action(action)<br ALIGN="LEFT"/>observation(observation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.wrappers.MonoAgentWrapperAdapter" [color="black", fontcolor="black", label=<{MonoAgentWrapperAdapter|keep_original : bool<br ALIGN="LEFT"/>keys : set<br ALIGN="LEFT"/>mono_envs : dict<br ALIGN="LEFT"/>wrappers : dict<br ALIGN="LEFT"/>|action(actions: WrapperActType): ActType<br ALIGN="LEFT"/>observation(observations: ObsType): WrapperObsType<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.wrappers.MultiMonoEnv" [color="black", fontcolor="black", label=<{MultiMonoEnv|action_space<br ALIGN="LEFT"/>observation_space<br ALIGN="LEFT"/>|reset()<br ALIGN="LEFT"/>step(action: Any): Tuple[Any, SupportsFloat, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.stk_wrappers.OnlyContinuousActionsWrapper" [color="black", fontcolor="black", label=<{OnlyContinuousActionsWrapper|discrete_actions : Dict<br ALIGN="LEFT"/>|action(action: Dict): Tuple[Any, float, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>observation(obs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.Phase" [color="black", fontcolor="black", label=<{Phase|name<br ALIGN="LEFT"/>|from_stk(source: pystk2.WorldState.Phase)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.stk_wrappers.PolarObservations" [color="black", fontcolor="black", label=<{PolarObservations|KEYS : list<br ALIGN="LEFT"/>SIMPLE_KEYS : list<br ALIGN="LEFT"/>|observation(obs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.pystk_process.PySTKProcess" [color="black", fontcolor="black", label=<{PySTKProcess|COUNT : int<br ALIGN="LEFT"/>pipe : PipeConnection<br ALIGN="LEFT"/>process : NoneType, Process<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.pystk_process.PySTKRemoteProcess" [color="black", fontcolor="black", label=<{PySTKRemoteProcess|race : Optional[pystk2.Race]<br ALIGN="LEFT"/>track : Optional[pystk2.Track]<br ALIGN="LEFT"/>world : Optional[pystk2.WorldState]<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_kart_action(kart_ix)<br ALIGN="LEFT"/>get_world()<br ALIGN="LEFT"/>list_tracks(): List[str]<br ALIGN="LEFT"/>race_step()<br ALIGN="LEFT"/>run(with_graphics: bool, level, pipe: Connection)<br ALIGN="LEFT"/>warmup_race(config): pystk2.Track<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.STKAction" [color="black", fontcolor="black", label=<{STKAction|acceleration : float<br ALIGN="LEFT"/>brake : bool<br ALIGN="LEFT"/>drift : bool<br ALIGN="LEFT"/>nitro : bool<br ALIGN="LEFT"/>rescue : bool<br ALIGN="LEFT"/>steering : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"pystk2_gymnasium.stk_wrappers.STKDiscreteAction" [color="black", fontcolor="black", label=<{STKDiscreteAction|acceleration : int<br ALIGN="LEFT"/>steering : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.STKRaceEnv" [color="black", fontcolor="black", label=<{STKRaceEnv|action_space : Dict<br ALIGN="LEFT"/>agent : NoneType<br ALIGN="LEFT"/>kart_ix : NoneType, ndarray<br ALIGN="LEFT"/>observation_space : Dict<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>|reset(): Tuple[pystk2.WorldState, Dict[str, Any]]<br ALIGN="LEFT"/>step(action: STKAction): Tuple[pystk2.WorldState, float, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.STKRaceMultiEnv" [color="black", fontcolor="black", label=<{STKRaceMultiEnv|action_space : Dict<br ALIGN="LEFT"/>agents : NoneType<br ALIGN="LEFT"/>free_positions<br ALIGN="LEFT"/>kart_indices : NoneType, list<br ALIGN="LEFT"/>kart_m_indices : list<br ALIGN="LEFT"/>observation_space : Dict<br ALIGN="LEFT"/>|reset(): Tuple[pystk2.WorldState, Dict[str, Any]]<br ALIGN="LEFT"/>step(actions: Dict[str, STKAction]): Tuple[pystk2.WorldState, float, bool, bool, Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.wrappers.SpaceFlattener" [color="black", fontcolor="black", label=<{SpaceFlattener|continuous_keys : list<br ALIGN="LEFT"/>discrete_keys : List[str]<br ALIGN="LEFT"/>indices : list<br ALIGN="LEFT"/>only_continuous : bool<br ALIGN="LEFT"/>only_discrete : bool<br ALIGN="LEFT"/>shapes : list<br ALIGN="LEFT"/>space : Box, Dict, MultiDiscrete<br ALIGN="LEFT"/>|discrete(observation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pystk2_gymnasium.envs.STKRaceEnv" -> "pystk2_gymnasium.envs.BaseSTKRaceEnv" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.envs.STKRaceMultiEnv" -> "pystk2_gymnasium.envs.BaseSTKRaceEnv" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.stk_wrappers.DiscreteActionsWrapper" -> "pystk2_gymnasium.definitions.ActionObservationWrapper" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.stk_wrappers.OnlyContinuousActionsWrapper" -> "pystk2_gymnasium.definitions.ActionObservationWrapper" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.stk_wrappers.STKDiscreteAction" -> "pystk2_gymnasium.envs.STKAction" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.wrappers.FlattenerWrapper" -> "pystk2_gymnasium.definitions.ActionObservationWrapper" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.wrappers.MonoAgentWrapperAdapter" -> "pystk2_gymnasium.definitions.ActionObservationWrapper" [arrowhead="empty", arrowtail="none"];
"pystk2_gymnasium.definitions.AgentSpec" -> "pystk2_gymnasium.envs.STKRaceEnv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"pystk2_gymnasium.definitions.AgentSpec" -> "pystk2_gymnasium.envs.STKRaceEnv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="spec", style="solid"];
"pystk2_gymnasium.pystk_process.PySTKProcess" -> "pystk2_gymnasium.envs.BaseSTKRaceEnv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_process", style="solid"];
"pystk2_gymnasium.utils.Discretizer" -> "pystk2_gymnasium.stk_wrappers.DiscreteActionsWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="d_acceleration", style="solid"];
"pystk2_gymnasium.utils.Discretizer" -> "pystk2_gymnasium.stk_wrappers.DiscreteActionsWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="d_steer", style="solid"];
"pystk2_gymnasium.wrappers.SpaceFlattener" -> "pystk2_gymnasium.wrappers.FlattenerWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="action_flattener", style="solid"];
"pystk2_gymnasium.wrappers.SpaceFlattener" -> "pystk2_gymnasium.wrappers.FlattenerWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="observation_flattener", style="solid"];
}
